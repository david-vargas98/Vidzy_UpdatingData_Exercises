
using System;
using System.Data.Entity;
using System.Linq;
using System.Reflection;
using System.Security.Cryptography;
using System.Xml.Linq;

namespace Vidzy
{
    class Program
    {
        static void AddNewVideo()
        {
            // Foreign key for Action genre
            byte action = 2;

            // Video object
            var newVideo = new Video
            {
                Name = "Terminator 1",
                ReleaseDate = new DateTime(1984, 10, 26),
                GenreId = action, // this avoids duplicating the Genre object by using new Genre() constructor
                Classification = Classification.Silver,
            };

            // Adding newVideo to the database
            using (var context = new VidzyContext())
            {
                context.Videos.Add(newVideo);
                context.SaveChanges();
            }

            // SQL sentences generated by Entity Framework by ckecking with LINQPad:
            
            //--Region Parameters
            // DECLARE @0 NVarChar(255) = 'Terminator 1'
            // DECLARE @1 DateTime2 = '1984-10-26 00:00:00.0000000'
            // DECLARE @2 TinyInt = 1
            // DECLARE @3 TinyInt = 1
            // -- EndRegion
            // INSERT[dbo].[Videos] ([Name], [ReleaseDate], [GenreId], [Classification])
            // VALUES(@0, @1, @2, @3)
            // SELECT[Id]
            // FROM[dbo].[Videos]
            // WHERE @@ROWCOUNT > 0 AND[Id] = scope_identity()

        }

        static void AddTags(params string[] newTagNames)
        {
            // adding tags to the database
            using (var context = new VidzyContext())
            {
                // first we bring out the tags which name is inside the newTagNames array
                var existingTags = context.Tags
                    .Where(t => newTagNames.Contains(t.Name))
                    .ToList(); // equivalent to SELECT * FROM Tags WHERE Name IN ('classic', 'drama');

                // Query in sql profiler:

                // SELECT
                // [Extent1].[Id] AS[Id], 
                // [Extent1].[Name] AS[Name]
                // FROM[dbo].[Tags] AS[Extent1]
                // WHERE([Extent1].[Name] IN(N'classic', N'drama')) AND([Extent1].[Name] IS NOT NULL)

                foreach (var name in newTagNames)
                {
                    if (!existingTags.Any(t => t.Name.Equals(name, StringComparison.CurrentCultureIgnoreCase))) // CurrentCultureIgnoreCase is used to ignore case sensitivity
                        context.Tags.Add(new Tag { Name = name });
                }

                // Queries in sql profiler:

                // exec sp_executesql N'INSERT [dbo].[Tags]([Name])
                // VALUES(@0)
                // SELECT[Id]
                // FROM[dbo].[Tags]
                // WHERE @@ROWCOUNT > 0 AND[Id] = scope_identity()',N'@0 nvarchar(max) ',@0=N'classic'
                // 
                // exec sp_executesql N'INSERT [dbo].[Tags]([Name])
                // VALUES(@0)
                // SELECT[Id]
                // FROM[dbo].[Tags]
                // WHERE @@ROWCOUNT > 0 AND[Id] = scope_identity()',N'@0 nvarchar(max) ',@0=N'drama'

                context.SaveChanges();
            }
        }

        static void AddTagsToVideo(int videoId, params string[] newTagNames)
        {
            using (var context = new VidzyContext())
            {
                // this will return ONLY the existing tags from the DB which their name is inside the newTagNames array
                var tagNames = context.Tags.Where(t => newTagNames.Contains(t.Name)).ToList(); 

                // query in sql profiler:

                // SELECT
                // [Extent1].[Id] AS[Id], 
                // [Extent1].[Name] AS[Name]
                // FROM[dbo].[Tags] AS[Extent1]
                // WHERE([Extent1].[Name] IN(N'classics', N'drama', N'comedy')) AND([Extent1].[Name] IS NOT NULL)

                // then we add the new tags which are not already in the database
                foreach(var newTagName in newTagNames) // iterate through the newTagNames array
                {
                    if (!tagNames.Any(t => t.Name.Equals(newTagName, StringComparison.CurrentCultureIgnoreCase))) // check if the tag is not already in the database
                        context.Tags.Add(new Tag { Name = newTagName });
                }

                // SQL query generated using EF through sql profiler:

                // exec sp_executesql N'INSERT [dbo].[Tags]([Name])
                //VALUES(@0)
                //SELECT[Id]
                //FROM[dbo].[Tags]
                //WHERE @@ROWCOUNT > 0 AND[Id] = scope_identity()',N'@0 nvarchar(max) ',@0=N'comedy'

                // getting the video by its ID
                var video = context.Videos.Single(v => v.Id == videoId);

                // query in LINQPad:

                // --Region Parameters
                // DECLARE @p__linq__0 Int = 1
                // -- EndRegion
                // SELECT TOP(2)
                //     [Extent1].[Id] AS[Id], 
                //     [Extent1].[Name] AS[Name], 
                //     [Extent1].[ReleaseDate] AS[ReleaseDate], 
                //     [Extent1].[GenreId] AS[GenreId], 
                //     [Extent1].[Classification] AS[Classification]
                //     FROM[dbo].[Videos] AS[Extent1]
                //     WHERE[Extent1].[Id] = @p__linq__0

                // iterating over each tag name in the newTagNames array and adding it to the video by using the AddTag() method
                tagNames.ForEach(t => video.AddTag(t));

                // SQL queries generated by Entity Framework:

                // exec sp_executesql N'INSERT [dbo].[VideoTags]([VideoId], [TagId])
                // VALUES (@0, @1)
                // ',N'@0 int,@1 int',@0=1,@1=1

                // exec sp_executesql N'INSERT [dbo].[VideoTags]([VideoId], [TagId])
                // VALUES (@0, @1)
                // ',N'@0 int,@1 int',@0=1,@1=2

                // exec sp_executesql N'INSERT [dbo].[VideoTags]([VideoId], [TagId])
                // VALUES (@0, @1)
                // ',N'@0 int,@1 int',@0=1,@1=3

                context.SaveChanges();
            }
        }

        static void RemoveTagsFromVideo(int videoId, params string[] tagNames)
        {
            using (var context = new VidzyContext())
            {
                // loading into the context the tags from the database which their name is inside the tagNames array
                context.Tags.Where(t => tagNames.Contains(t.Name)).Load();

                // query in LINQPad:

                //SELECT 
                //    [Extent1].[Id] AS [Id], 
                //    [Extent1].[Name] AS [Name]
                //    FROM [dbo].[Tags] AS [Extent1]
                //    WHERE([Extent1].[Name] IN(N'comedy')) AND([Extent1].[Name] IS NOT NULL)

                // getting the video by its ID
                var video = context.Videos.Single(v => v.Id == videoId);

                // --Region Parameters
                // DECLARE @p__linq__0 Int = 1
                // -- EndRegion
                // SELECT TOP(2)
                //     [Extent1].[Id] AS[Id], 
                //     [Extent1].[Name] AS[Name], 
                //     [Extent1].[ReleaseDate] AS[ReleaseDate], 
                //     [Extent1].[GenreId] AS[GenreId], 
                //     [Extent1].[Classification] AS[Classification]
                //     FROM[dbo].[Videos] AS[Extent1]
                //     WHERE[Extent1].[Id] = @p__linq__0


                // looping through the tags loaded into the context
                foreach(var tagName in tagNames)
                {
                    video.RemoveTag(tagName); // using the RemoveTag() method from the Video class to remove the tag from the video
                }

                // SQL query generated by Entity Framework:

                // exec sp_executesql N'SELECT 
                // [Extent2].[Id] AS[Id], 
                // [Extent2].[Name] AS[Name]
                // FROM[dbo].[VideoTags] AS[Extent1]
                // INNER JOIN[dbo].[Tags] AS[Extent2] ON[Extent1].[TagId] = [Extent2].[Id]
                // WHERE[Extent1].[VideoId] = @EntityKeyValue1',N'@EntityKeyValue1 int',@EntityKeyValue1=1

                // exec sp_executesql N'DELETE [dbo].[VideoTags]
                // WHERE(([VideoId] = @0) AND([TagId] = @1))',N'@0 int,@1 int',@0=1,@1=3

                context.SaveChanges();
            }
        }

        static void RemoveVideo(int videoId)
        {
            using (var context = new VidzyContext())
            {
                // getting the video to remove by its ID
                var videoToRemove = context.Videos.Single(v => v.Id == videoId);

                if (videoToRemove == null) // if the video is not found, we exit the method
                    return;

                context.Videos.Remove(videoToRemove); // saves it in the context to be removed

                // SQL query generated by Entity Framework:

                // exec sp_executesql N'DELETE [dbo].[Videos]
                // WHERE([Id] = @0)',N'@0 int',@0=1

                context.SaveChanges(); // removes from the database

            }
        }

        static void Main(string[] args)
        {
            //AddNewVideo();
            //AddTags("classics", "drama");
            //AddTagsToVideo(1, "classics", "drama", "comedy");
            //RemoveTagsFromVideo(1, "comedy");
            RemoveVideo(1);
        }
    }
}
